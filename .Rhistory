function(d = 30,
n = 1000,
p = NULL,
m = 2,
h = 2,
lambda_2,
rholist,
method = c("maxstable", "mpareto"),
gen_model = c("BA", "latent_cycle", "latent_random","flights"),
val_set = FALSE, plot_result = FALSE,alpha = 10, BA_model = NULL,figure_dest_folder=NULL, ...) {
if (gen_model == "BA") {
BA_model <- generate_BA_model(d = d, m = m)
G <- BA_model$G
g <- BA_model$graph
}
if (gen_model == "BA_fixed") {
G <- BA_model$G
g <- BA_model$graph
}
if (gen_model == "latent_cycle") {
latent_model <- generate_latent_model_cycle(p = d, h)
G <- 10 * latent_model$Gamma[1:d, 1:d]
g <- subgraph(latent_model$graph, 1:d)
}
if (gen_model == "latent_random") {
latent_model <- generate_latent_model_random(p = d, h)
G <- 10 * latent_model$Gamma[1:d, 1:d]
g <- subgraph(latent_model$graph, 1:d)
}
# perform simulation
if (method == "maxstable") X <- rmstable(n = n, d = d, model = "HR", par = G)
if (method == "mpareto") X <- rmpareto(n = n, d = d, model = "HR", par = G)
G_emp <- emp_vario(data = X, p = p)
# fit latent model
fit_latent <- eglatent(Gamma = G_emp, lam1_list = rholist, lam2_list = lambda_2, refit = TRUE)
F1_latent <- sapply(1:length(rholist), FUN = function(i) F1_score(g = g, gest = fit_latent$graph[[i]]))
sparse_latent <- sapply(1:length(rholist), FUN = function(i) length(E(fit_latent$graph[[i]])) / (d * (d - 1) / 2))
rk <- fit_latent$rk
# fit eglearn model
fit_eglearn <- eglearn(data = X, p = p, rholist = alpha* rholist, reg_method = "ns")
F1_eglearn <- sapply(1:length(rholist), FUN = function(i) F1_score(g = g, gest = fit_eglearn$graph[[i]]))
connected_eglearn <- sapply(1:length(rholist), FUN = function(i) ifelse(is_connected(fit_eglearn$graph[[i]]), 21, 4))
sparse_eglearn <- sapply(1:length(rholist), FUN = function(i) length(E(fit_eglearn$graph[[i]])) / (d * (d - 1) / 2))
dat_sparse <- tibble(rholist = rholist, F1_latent = F1_latent, F1_eglearn = F1_eglearn, sparse_latent = sparse_latent, rk = rk, sparse_eglearn = sparse_eglearn)
if (plot_result){
gg1 <- ggplot(dat_sparse) +
geom_line(aes(x = rholist, y = F1_latent), linetype = "solid") +
geom_point(aes(x = rholist, y = F1_latent), shape = 21, size = 3, stroke = 1, fill = "white") +
geom_line(aes(x = rholist, y = F1_eglearn), linetype = "dashed") +
geom_point(aes(x = rholist, y = F1_eglearn), shape = connected_eglearn, size = 3, stroke = 1, fill = "white") +
xlab(TeX("Regularization parameter $\\lambda_n$")) +
ylab("F-score") +
ylim(0, 1) +
scale_x_continuous(
breaks = unique(round(rholist, 2)),
labels = unique(round(rholist, 2)),
sec.axis = sec_axis(
trans = ~., breaks = rholist,
labels = rk,
name = ""
)
)
gg1
}
if (val_set == TRUE) {
if (method == "maxstable") {
X_val_tmp <- rmstable(n = n, d = d, model = "HR", par = G)
X_val <- data2mpareto(X_val_tmp, p = p)
}
if (method == "mpareto") X_val <- rmpareto(n = n, d = d, model = "HR", par = G)
loglik_latent <- sapply(1:length(rholist), FUN = function(i) {
loglik_HR(data = X_val, Gamma = fit_latent$G_est[[i]], cens = FALSE)[1]
})
loglik_latent_refit <- sapply(1:length(rholist), FUN = function(i) {
loglik_HR(data = X_val, Gamma = fit_latent$G_refit[[i]], cens = FALSE)[1]
})
loglik_eglearn <- sapply(1:length(rholist), FUN = function(i) ifelse(connected_eglearn[i] == 21, loglik_HR(data = X_val, Gamma = complete_Gamma(Gamma = G_emp, graph = fit_eglearn$graph[[i]]), cens = FALSE)[1], NA))
dat <- tibble(rholist = rholist, loglik_latent_refit = loglik_latent_refit, loglik_eglearn = loglik_eglearn)
if (plot_result){
gg2 <- ggplot(dat) +
geom_line(aes(x = rholist, y = loglik_latent_refit), linetype = "solid") +
geom_point(aes(x = rholist, y = loglik_latent_refit), shape = 21, size = 3, stroke = 1, fill = "white") +
geom_line(aes(x = rholist, y = loglik_eglearn), linetype = "dashed") +
geom_point(aes(x = rholist, y = loglik_eglearn), shape = connected_eglearn, size = 3, stroke = 1, fill = "white") +
xlab(TeX("Regularization parameter $\\lambda_n$")) +
ylab("Log-likelihood") +
coord_cartesian(ylim=c(min(loglik_latent_refit), max(loglik_eglearn, loglik_latent_refit))) +
# ylim(min(loglik_latent_refit), max(loglik_eglearn, loglik_latent_refit)) + # - .5*(max(loglik_latent_refit) - min(loglik_latent_refit))
scale_x_continuous(
breaks = unique(round(rholist, 2)),
labels = unique(round(rholist, 2)),
sec.axis = sec_axis(
trans = ~., breaks = rholist,
labels = sapply(
fit_latent$graph,
igraph::gsize
)
)
)
gg2
gg_both <- ggarrange(gg1, gg2, nrow=1, align = "hv")
gg_both
figure_dest_folder <-
save_myplot(
plt = gg_both,
plt_nm = paste0(figure_dest_folder, "F1_likelihood", ".pdf"),
width = 10,
height = 5,
cairo = FALSE
)
}
}
return(list(F1_latent=F1_latent,rk=rk,loglik_latent_refit=loglik_latent_refit,F1_eglearn=F1_eglearn,loglik_eglearn=loglik_eglearn,data_train = X,data_test = X_val))
}
set.seed(333242)
d <- 30 # number of observed nodes
k <- 5000 # number of effective extreme samples
n <- floor(k^{1/.65})
p <- 1 - n^0.65 / n
m <- 2
h <- 2 # number of latent variables
rholist <- seq(0.0001, .05, length.out = 15) # this represents sequence of \lambda_n for eglatent and rho for eglearn
alpha <- 4 # this is how much rholist gets scaled for eglearn
lambda_2 <- 4 # gamma for eglatent
method <- "maxstable"
gen_model <- "latent_cycle" # latent model with a cycle graph
val_set <- TRUE
plot_result <- TRUE
tbl1 <- eglatent_path(d = d, n = n, p = p, m = m, h = h, lambda_2 = lambda_2, rholist = rholist, method = method, gen_model = gen_model, val_set = val_set,plot_result = plot_result,alpha = alpha,figure_dest_folder=figure_dest_folder)
plot_result
figure_dest_folder
k<-2000
n <- floor(k^{1/.65})
> p <- 1 - n^0.65 / n
p <- 1 - n^0.65 / n
tbl1 <- eglatent_path(d = d, n = n, p = p, m = m, h = h, lambda_2 = lambda_2, rholist = rholist, method = method, gen_model = gen_model, val_set = val_set,plot_result = plot_result,alpha = alpha,figure_dest_folder=figure_dest_folder)
k
n
k<-200
h
n <- floor(k^{1/.65})
p <- 1 - n^0.65 / n
tbl1 <- eglatent_path(d = d, n = n, p = p, m = m, h = h, lambda_2 = lambda_2, rholist = rholist, method = method, gen_model = gen_model, val_set = val_set,plot_result = plot_result,alpha = alpha,figure_dest_folder=figure_dest_folder)
k<-2000
n <- floor(k^{1/.65})
p <- 1 - n^0.65 / n
tbl1 <- eglatent_path(d = d, n = n, p = p, m = m, h = h, lambda_2 = lambda_2, rholist = rholist, method = method, gen_model = gen_model, val_set = val_set,plot_result = plot_result,alpha = alpha,figure_dest_folder=figure_dest_folder)
tbl1
eglatent_patheglatent_path<-
function(d = 30,
n = 1000,
p = NULL,
m = 2,
h = 2,
lambda_2,
rholist,
method = c("maxstable", "mpareto"),
gen_model = c("BA", "latent_cycle", "latent_random","flights"),
val_set = FALSE, plot_result = FALSE,alpha = 10, BA_model = NULL,figure_dest_folder=NULL, ...) {
if (gen_model == "BA") {
BA_model <- generate_BA_model(d = d, m = m)
G <- BA_model$G
g <- BA_model$graph
}
if (gen_model == "BA_fixed") {
G <- BA_model$G
g <- BA_model$graph
}
if (gen_model == "latent_cycle") {
latent_model <- generate_latent_model_cycle(p = d, h)
G <- 10 * latent_model$Gamma[1:d, 1:d]
g <- subgraph(latent_model$graph, 1:d)
}
if (gen_model == "latent_random") {
latent_model <- generate_latent_model_random(p = d, h)
G <- 10 * latent_model$Gamma[1:d, 1:d]
g <- subgraph(latent_model$graph, 1:d)
}
# perform simulation
if (method == "maxstable") X <- rmstable(n = n, d = d, model = "HR", par = G)
if (method == "mpareto") X <- rmpareto(n = n, d = d, model = "HR", par = G)
G_emp <- emp_vario(data = X, p = p)
# fit latent model
fit_latent <- eglatent(Gamma = G_emp, lam1_list = rholist, lam2_list = lambda_2, refit = TRUE)
F1_latent <- sapply(1:length(rholist), FUN = function(i) F1_score(g = g, gest = fit_latent$graph[[i]]))
sparse_latent <- sapply(1:length(rholist), FUN = function(i) length(E(fit_latent$graph[[i]])) / (d * (d - 1) / 2))
rk <- fit_latent$rk
# fit eglearn model
fit_eglearn <- eglearn(data = X, p = p, rholist = alpha* rholist, reg_method = "ns")
F1_eglearn <- sapply(1:length(rholist), FUN = function(i) F1_score(g = g, gest = fit_eglearn$graph[[i]]))
connected_eglearn <- sapply(1:length(rholist), FUN = function(i) ifelse(is_connected(fit_eglearn$graph[[i]]), 21, 4))
sparse_eglearn <- sapply(1:length(rholist), FUN = function(i) length(E(fit_eglearn$graph[[i]])) / (d * (d - 1) / 2))
dat_sparse <- tibble(rholist = rholist, F1_latent = F1_latent, F1_eglearn = F1_eglearn, sparse_latent = sparse_latent, rk = rk, sparse_eglearn = sparse_eglearn)
if (plot_result){
gg1 <- ggplot(dat_sparse) +
geom_line(aes(x = rholist, y = F1_latent), linetype = "solid") +
geom_point(aes(x = rholist, y = F1_latent), shape = 21, size = 3, stroke = 1, fill = "white") +
geom_line(aes(x = rholist, y = F1_eglearn), linetype = "dashed") +
geom_point(aes(x = rholist, y = F1_eglearn), shape = connected_eglearn, size = 3, stroke = 1, fill = "white") +
xlab(TeX("Regularization parameter $\\lambda_n$")) +
ylab("F-score") +
ylim(0, 1) +
scale_x_continuous(
breaks = unique(round(rholist, 2)),
labels = unique(round(rholist, 2)),
sec.axis = sec_axis(
trans = ~., breaks = rholist,
labels = rk,
name = ""
)
)
gg1
}
if (val_set == TRUE) {
if (method == "maxstable") {
X_val_tmp <- rmstable(n = n, d = d, model = "HR", par = G)
X_val <- data2mpareto(X_val_tmp, p = p)
}
if (method == "mpareto") X_val <- rmpareto(n = n, d = d, model = "HR", par = G)
loglik_latent <- sapply(1:length(rholist), FUN = function(i) {
loglik_HR(data = X_val, Gamma = fit_latent$G_est[[i]], cens = FALSE)[1]
})
loglik_latent_refit <- sapply(1:length(rholist), FUN = function(i) {
loglik_HR(data = X_val, Gamma = fit_latent$G_refit[[i]], cens = FALSE)[1]
})
loglik_eglearn <- sapply(1:length(rholist), FUN = function(i) ifelse(connected_eglearn[i] == 21, loglik_HR(data = X_val, Gamma = complete_Gamma(Gamma = G_emp, graph = fit_eglearn$graph[[i]]), cens = FALSE)[1], NA))
dat <- tibble(rholist = rholist, loglik_latent_refit = loglik_latent_refit, loglik_eglearn = loglik_eglearn)
if (plot_result){
gg2 <- ggplot(dat) +
geom_line(aes(x = rholist, y = loglik_latent_refit), linetype = "solid") +
geom_point(aes(x = rholist, y = loglik_latent_refit), shape = 21, size = 3, stroke = 1, fill = "white") +
geom_line(aes(x = rholist, y = loglik_eglearn), linetype = "dashed") +
geom_point(aes(x = rholist, y = loglik_eglearn), shape = connected_eglearn, size = 3, stroke = 1, fill = "white") +
xlab(TeX("Regularization parameter $\\lambda_n$")) +
ylab("Log-likelihood") +
coord_cartesian(ylim=c(min(loglik_latent_refit), max(loglik_eglearn, loglik_latent_refit))) +
# ylim(min(loglik_latent_refit), max(loglik_eglearn, loglik_latent_refit)) + # - .5*(max(loglik_latent_refit) - min(loglik_latent_refit))
scale_x_continuous(
breaks = unique(round(rholist, 2)),
labels = unique(round(rholist, 2)),
sec.axis = sec_axis(
trans = ~., breaks = rholist,
labels = sapply(
fit_latent$graph,
igraph::gsize
)
)
)
gg2
gg_both <- ggarrange(gg1, gg2, nrow=1, align = "hv")
gg_both
figure_dest_folder <-
save_myplot(
plt = gg_both,
plt_nm = paste0(figure_dest_folder, "F1_likelihood", ".pdf"),
width = 10,
height = 5,
cairo = FALSE
)
}
}
return(list(F1_latent=F1_latent,rk=rk,loglik_latent_refit=loglik_latent_refit,F1_eglearn=F1_eglearn,loglik_eglearn=loglik_eglearn,sparse_latent=sparse_latent,sparse_eglearn=sparse_eglearn,data_train = X,data_test = X_val))
}
tbl1 <- eglatent_path(d = d, n = n, p = p, m = m, h = h, lambda_2 = lambda_2, rholist = rholist, method = method, gen_model = gen_model, val_set = val_set,plot_result = plot_result,alpha = alpha,figure_dest_folder=figure_dest_folder)
eglatent_path<-
function(d = 30,
n = 1000,
p = NULL,
m = 2,
h = 2,
lambda_2,
rholist,
method = c("maxstable", "mpareto"),
gen_model = c("BA", "latent_cycle", "latent_random","flights"),
val_set = FALSE, plot_result = FALSE,alpha = 10, BA_model = NULL,figure_dest_folder=NULL, ...) {
if (gen_model == "BA") {
BA_model <- generate_BA_model(d = d, m = m)
G <- BA_model$G
g <- BA_model$graph
}
if (gen_model == "BA_fixed") {
G <- BA_model$G
g <- BA_model$graph
}
if (gen_model == "latent_cycle") {
latent_model <- generate_latent_model_cycle(p = d, h)
G <- 10 * latent_model$Gamma[1:d, 1:d]
g <- subgraph(latent_model$graph, 1:d)
}
if (gen_model == "latent_random") {
latent_model <- generate_latent_model_random(p = d, h)
G <- 10 * latent_model$Gamma[1:d, 1:d]
g <- subgraph(latent_model$graph, 1:d)
}
# perform simulation
if (method == "maxstable") X <- rmstable(n = n, d = d, model = "HR", par = G)
if (method == "mpareto") X <- rmpareto(n = n, d = d, model = "HR", par = G)
G_emp <- emp_vario(data = X, p = p)
# fit latent model
fit_latent <- eglatent(Gamma = G_emp, lam1_list = rholist, lam2_list = lambda_2, refit = TRUE)
F1_latent <- sapply(1:length(rholist), FUN = function(i) F1_score(g = g, gest = fit_latent$graph[[i]]))
sparse_latent <- sapply(1:length(rholist), FUN = function(i) length(E(fit_latent$graph[[i]])) / (d * (d - 1) / 2))
rk <- fit_latent$rk
# fit eglearn model
fit_eglearn <- eglearn(data = X, p = p, rholist = alpha* rholist, reg_method = "ns")
F1_eglearn <- sapply(1:length(rholist), FUN = function(i) F1_score(g = g, gest = fit_eglearn$graph[[i]]))
connected_eglearn <- sapply(1:length(rholist), FUN = function(i) ifelse(is_connected(fit_eglearn$graph[[i]]), 21, 4))
sparse_eglearn <- sapply(1:length(rholist), FUN = function(i) length(E(fit_eglearn$graph[[i]])) / (d * (d - 1) / 2))
dat_sparse <- tibble(rholist = rholist, F1_latent = F1_latent, F1_eglearn = F1_eglearn, sparse_latent = sparse_latent, rk = rk, sparse_eglearn = sparse_eglearn)
if (plot_result){
gg1 <- ggplot(dat_sparse) +
geom_line(aes(x = rholist, y = F1_latent), linetype = "solid") +
geom_point(aes(x = rholist, y = F1_latent), shape = 21, size = 3, stroke = 1, fill = "white") +
geom_line(aes(x = rholist, y = F1_eglearn), linetype = "dashed") +
geom_point(aes(x = rholist, y = F1_eglearn), shape = connected_eglearn, size = 3, stroke = 1, fill = "white") +
xlab(TeX("Regularization parameter $\\lambda_n$")) +
ylab("F-score") +
ylim(0, 1) +
scale_x_continuous(
breaks = unique(round(rholist, 2)),
labels = unique(round(rholist, 2)),
sec.axis = sec_axis(
trans = ~., breaks = rholist,
labels = rk,
name = ""
)
)
gg1
}
if (val_set == TRUE) {
if (method == "maxstable") {
X_val_tmp <- rmstable(n = n, d = d, model = "HR", par = G)
X_val <- data2mpareto(X_val_tmp, p = p)
}
if (method == "mpareto") X_val <- rmpareto(n = n, d = d, model = "HR", par = G)
loglik_latent <- sapply(1:length(rholist), FUN = function(i) {
loglik_HR(data = X_val, Gamma = fit_latent$G_est[[i]], cens = FALSE)[1]
})
loglik_latent_refit <- sapply(1:length(rholist), FUN = function(i) {
loglik_HR(data = X_val, Gamma = fit_latent$G_refit[[i]], cens = FALSE)[1]
})
loglik_eglearn <- sapply(1:length(rholist), FUN = function(i) ifelse(connected_eglearn[i] == 21, loglik_HR(data = X_val, Gamma = complete_Gamma(Gamma = G_emp, graph = fit_eglearn$graph[[i]]), cens = FALSE)[1], NA))
dat <- tibble(rholist = rholist, loglik_latent_refit = loglik_latent_refit, loglik_eglearn = loglik_eglearn)
if (plot_result){
gg2 <- ggplot(dat) +
geom_line(aes(x = rholist, y = loglik_latent_refit), linetype = "solid") +
geom_point(aes(x = rholist, y = loglik_latent_refit), shape = 21, size = 3, stroke = 1, fill = "white") +
geom_line(aes(x = rholist, y = loglik_eglearn), linetype = "dashed") +
geom_point(aes(x = rholist, y = loglik_eglearn), shape = connected_eglearn, size = 3, stroke = 1, fill = "white") +
xlab(TeX("Regularization parameter $\\lambda_n$")) +
ylab("Log-likelihood") +
coord_cartesian(ylim=c(min(loglik_latent_refit), max(loglik_eglearn, loglik_latent_refit))) +
# ylim(min(loglik_latent_refit), max(loglik_eglearn, loglik_latent_refit)) + # - .5*(max(loglik_latent_refit) - min(loglik_latent_refit))
scale_x_continuous(
breaks = unique(round(rholist, 2)),
labels = unique(round(rholist, 2)),
sec.axis = sec_axis(
trans = ~., breaks = rholist,
labels = sapply(
fit_latent$graph,
igraph::gsize
)
)
)
gg2
gg_both <- ggarrange(gg1, gg2, nrow=1, align = "hv")
gg_both
figure_dest_folder <-
save_myplot(
plt = gg_both,
plt_nm = paste0(figure_dest_folder, "F1_likelihood", ".pdf"),
width = 10,
height = 5,
cairo = FALSE
)
}
}
return(list(F1_latent=F1_latent,rk=rk,loglik_latent_refit=loglik_latent_refit,F1_eglearn=F1_eglearn,loglik_eglearn=loglik_eglearn,sparse_latent=sparse_latent,sparse_eglearn=sparse_eglearn,data_train = X,data_test = X_val))
}
tbl1 <- eglatent_path(d = d, n = n, p = p, m = m, h = h, lambda_2 = lambda_2, rholist = rholist, method = method, gen_model = gen_model, val_set = val_set,plot_result = plot_result,alpha = alpha,figure_dest_folder=figure_dest_folder)
k<-1000
n <- floor(k^{1/.65})
p <- 1 - n^0.65 / n
tbl1 <- eglatent_path(d = d, n = n, p = p, m = m, h = h, lambda_2 = lambda_2, rholist = rholist, method = method, gen_model = gen_model, val_set = val_set,plot_result = plot_result,alpha = alpha,figure_dest_folder=figure_dest_folder)
k<-5000
n <- floor(k^{1/.65})
p <- 1 - n^0.65 / n
tbl1 <- eglatent_path(d = d, n = n, p = p, m = m, h = h, lambda_2 = lambda_2, rholist = rholist, method = method, gen_model = gen_model, val_set = val_set,plot_result = plot_result,alpha = alpha,figure_dest_folder=figure_dest_folder)
tbl1$sparse_eglearn
tbl1$loglik_eglearn
which.max(tbl1$loglik_eglearn)
0.5793103*30*(30-1)/2
check_assumptions <- function(p, h,latent_strength,edge_strength,rho,eps) {
W <- matrix(1, p + h, p + h)
S<-as.matrix(as.matrix(as.matrix(erdos.renyi.game(p,rho))))
not_connected <- !(is_connected(graph_from_adjacency_matrix(S)))
max_degree <- max(rowSums(S))
min_degree <- min(rowSums(S))
W[1:p, 1:p] <- S
diag(W) <- 0
L <- matrix(runif((p + h)^2, edge_strength, edge_strength), nrow = p + h)
if(h!=0){
L[(p + 1):(p + h), (p + 1):(p + h)] <- diag(h)
z <- latent_strength/ (sqrt(as.integer(p / h))) * matrix(runif(as.integer(p / h), 1,1+eps), nrow = as.integer(p / h))
for (i in 1:h) {
L[1:p, (p + i):(p + i)] <- 0
L[(p + i):(p + i), 1:p] <- 0
L[seq(i, p, h), (p + i):(p + i)] <- z
L[(p + i):(p + i), seq(i, p, h)] <- z
}
}
W <- W * L
W[lower.tri(W)] <- t(W)[lower.tri(W)]
Theta <- diag(rowSums(W)) - W
G <- Theta2Gamma(Theta)
U<-svd(matrix(1,p,p))$u[,2:(p)]
Theta_obs <- U%*%solve(t(U)%*%(-G[1:p,1:p]/2)%*%(U))%*%t(U)
S <- Theta[1:p,1:p]
L<- S-Theta_obs
## obtain the Hessian matrix
Hess <- kron(solve(Theta_obs+1/p*matrix(1,p,p)),solve(Theta_obs+1/p*matrix(1,p,p)))
P_C <- Reshape(svd(L)$u[,1:h],p,h)%*%t(Reshape(svd(L)$u[,1:h],p,h)) # column space
P_T <- kron(P_C,eye(p)) + kron(eye(p),P_C)-kron(P_C,P_C) # subspace of the true low-rank term
U <- svd(cbind(svd(L)$u[,1:p],1/sqrt(p)*matrix(1,p,1)))$u
P_Tp1 <- diag(p^2)-kron(U[,(h+1):p]%*%t(U[,(h+1):p]),U[,(h+1):p]%*%t(U[,(h+1):p]))
ind <- which(Reshape(abs(S),p^2,1)>=10^(-4));temp <- matrix(1,p^2,1);temp[setdiff(1:p^2,ind)]<-0;P_S <- diag(as.numeric(temp)) # subpsace of the sparse term
ind2 <- which(Reshape(abs(S),p^2,1)>=10^(-4));temp <- matrix(1,p^2,1);temp[setdiff(1:p^2,ind2)]<-0;P_Sperp <- diag(p^2)-diag(as.numeric(temp))
degree <- max(rowSums(abs(S)>10^(-5)))
inc_star <- 2*sqrt(max(diag(P_C)))
kappa_star <- irlba((diag(p)-P_C)%*%(matrix(1,p,p)/p)%*%(diag(p)-P_C),1,1)$d[1] #kappa_star quantity
omega <- 0.00001
gamma <- seq(0.5,5,0.05)
M <- matrix(0,2*p^2,2*p^2); M[1:p^2,1:p^2] = P_S; M[seq((p^2+1),2*p^2,1), seq((p^2+1),2*p^2,1)]<- P_T
A <- matrix(0,p^2,2*p^2); A[1:p^2,1:p^2]<- diag(p^2); A[1:p^2,seq((p^2+1),2*p^2,1)]<- diag(p^2); Adj <- matrix(0,2*p^2,p^2); Adj[1:p^2,1:p^2]<-diag(p^2); Adj[seq((p^2+1),2*p^2,1),1:p^2]<-diag(p^2)
M_perp <- matrix(0,2*p^2,2*p^2); M_perp[1:p^2,1:p^2] = (diag(p^2)-P_S); M_perp[seq((p^2+1),2*p^2,1), seq((p^2+1),2*p^2,1)]<- diag(p^2)-P_Tp1
M_all_ones <- matrix(0,2*p^2,2*p^2); M_all_ones[1:p^2,1:p^2] <- P_S; M_all_ones[seq((p^2+1),2*p^2,1),seq((p^2+1),2*p^2,1)]<-P_Tp1
rank_all <- sum(diag(P_S + P_Tp1))
temp_svd <- irlba(M_all_ones%*%Adj%*%Hess%*%A%*%M_all_ones,rank_all+5,rank_all+5)
H_new <- (M_perp%*%Adj%*%Hess%*%A%*%M_all_ones)%*%((temp_svd$u[,1:rank_all])%*%solve(diag(temp_svd$d[1:rank_all]))%*%t(temp_svd$v[,1:rank_all]))
H_temp<-(M_perp%*%Adj%*%Hess%*%A%*%M_all_ones)
V<- svd((diag(p)-P_C)%*%matrix(1,p,p))$u;N3<- matrix(0,2*p^2,2*p^2); N3[seq((p^2+1),2*p^2,1),seq((p^2+1),2*p^2,1)]<-kron(V[,1]%*%t(V[,1]),V[,1]%*%t(V[,1]))
H_temp <- (M%*%Adj%*%Hess%*%A%*%M_perp%*%N3)
T_T <- c()
Omega_T <- c()
T_Omega <- c()
Omega_Omega <- c()
Tperp_T <- c()
Tperp_Omega <- c()
Omegaperp_Omega <- c()
Omegaperp_T <- c()
Omegaperp_Omega_non_inverse <- c()
Omegaperp_T_non_inverse <- c()
Tperp_T_non_inverse <- c()
Tperp_Omega_non_inverse <- c()
for (i in 1:1000){
t1 <- matrix(rnorm(p*h),p,h)
t2 <- matrix(rnorm(p*h),h,p)
a <- rnorm(1)
t3 <- matrix(rnorm(p^2),p,p); t3[setdiff(1:p^2,ind)]<-0; t3 <- t3/max(abs(t3));
F <- Reshape(svd(S-Theta_obs)$u[,1:h],p,h)%*%t2 + t1%*%t(svd(S-Theta_obs)$u[,1:h])+a/p*matrix(1,p,p); F<-F/irlba(F,1,1)$d[1]
L <- solve(Theta_obs+1/p*matrix(1,p,p))%*%F%*%solve(Theta_obs+1/p*matrix(1,p,p))
#L <- L-diag(diag(L))
T_T <- append(T_T,irlba(L-(U[,(h+1):p]%*%t(U[,(h+1):p]))%*%L%*%(U[,(h+1):p]%*%t(U[,(h+1):p])),1,1)$d[1])
Omega_T <- append(Omega_T,max(abs(L[ind])))
L<- solve(Theta_obs+1/p*matrix(1,p,p))%*%t3%*%solve(Theta_obs+1/p*matrix(1,p,p))
#L <- L-diag(diag(L))
Omega_Omega <-append(Omega_Omega,max(abs(L[ind])))
T_Omega <- append(T_Omega,irlba(L -(U[,(h+1):p]%*%t(U[,(h+1):p]))%*%L%*%(U[,(h+1):p]%*%t(U[,(h+1):p])),1,1)$d[1])
Omegaperp_T <- append(Omegaperp_T,max(abs(H_new[1:p^2,seq((p^2+1),2*p^2,1)]%*%Reshape(F,p^2,1))))
Omegaperp_Omega <-append(Omegaperp_Omega,max(abs(H_new[1:p^2,1:p^2]%*%Reshape(t3,p^2,1))))
Tperp_Omega<- append(Tperp_Omega,irlba(Reshape(H_new[seq((p^2+1),2*p^2,1),1:p^2]%*%Reshape(t3,p^2,1),p,p),1,1)$d[1])
Tperp_T <- append(Tperp_T,irlba(Reshape(H_new[seq((p^2+1),2*p^2,1),seq((p^2+1),2*p^2,1)]%*%Reshape(F,p^2,1),p,p),1,1)$d[1])
Omegaperp_Omega_non_inverse <- append(Omegaperp_Omega_non_inverse,max(abs(H_temp[1:p^2,1:p^2]%*%Reshape(t3,p^2,1))))
Omegaperp_T_non_inverse <- append(Omegaperp_T_non_inverse,max(abs(H_temp[1:p^2,seq((p^2+1),2*p^2,1)]%*%Reshape(F,p^2,1))))
Tperp_T_non_inverse <-append(Tperp_T_non_inverse,svd(Reshape(H_temp[seq((p^2+1),2*p^2,1),1:p^2]%*%Reshape(t3,p^2,1),p,p))$d[1])
Tperp_Omega_non_inverse <- append(Tperp_Omega_non_inverse,irlba(Reshape(H_temp[seq((p^2+1),2*p^2,1),seq((p^2+1),2*p^2,1)]%*%Reshape(F,p^2,1),p,p),1,1)$d[1])
}
alpha_all_ones <- pmin(min(Omega_Omega)-max(Omega_T)*gamma,min(T_T)-max(T_Omega)/gamma)
delta <- pmax(max(Omegaperp_Omega)+gamma*max(Omegaperp_T),max(Tperp_T)+max(Tperp_Omega)/gamma)
delta_2<- pmax(max(Omegaperp_Omega_non_inverse)+gamma*max(Omegaperp_T_non_inverse),max(Tperp_T_non_inverse)+max(Tperp_Omega_non_inverse)/gamma)
alpha_tilde <-(1-(4*kappa_star+5*omega))*alpha_all_ones- (2*(5*omega+4*kappa_star)*irlba(Hess,1,1)$d[1]*pmax(gamma,1))- (4*kappa_star+5*omega)*irlba(Hess,1,1)$d[1]*(degree/gamma+1)
Delta_norm <- 1/alpha_tilde*(2*(5*omega+4*kappa_star)*irlba(Hess,1,1)$d[1]*pmax(gamma,1)+(4*kappa_star+5*omega)*irlba(Hess,1,1)$d[1]*(degree/gamma+1))
term_1 <- (2*delta_2+2*irlba(Hess,1,1)$d[1]*pmax(gamma,1)*(4*kappa_star+5*omega)+irlba(Hess,1,1)$d[1]*(degree/gamma+1)*(4*kappa_star+5*omega))*(Delta_norm+4*kappa_star+5*omega)/alpha_all_ones
term_2 <- delta*(1+5*omega+4*kappa_star)+irlba(Hess,1,1)$d[1]*pmax(gamma,1)*(5*omega+4*kappa_star)*(1+5*omega+4*kappa_star)/alpha_all_ones
term_3 <-irlba(Hess,1,1)$d[1]*pmax(gamma,1)*(5*omega+4*kappa_star)*(1+degree/gamma)*(1+5*omega+4*kappa_star)/alpha_all_ones
delta_tild <- term_1+term_2+term_3
## checks
F <- irlba((diag(p)-P_C)%*%matrix(1,p,p)%*%(diag(p)-P_C),1,1)$u[,1]%*%t(irlba((diag(p)-P_C)%*%matrix(1,p,p)%*%(diag(p)-P_C),1,1)$u[,1])
check_0 <- ((alpha_tilde>=0)*(delta_tild <= 1))
check_1 <- ((1-delta_tild)>=4*omega)
check_2 <- (alpha_tilde > 8*omega*pmax(gamma,1)*(irlba(Reshape(Hess%*%Reshape(F,p^2,1),p,p),1,1)$d[1]+irlba(Hess,1,1)$d[1]*omega+1))
check_3 <- ((kappa_star > omega)*(kappa_star <= 4*delta_tild)*(kappa_star <= alpha_tilde/(8*omega*pmax(gamma,1)*(irlba(Reshape(Hess%*%Reshape(F,p^2,1),p,p),1,1)$d[1]+irlba(Hess,1,1)$d[1]*omega+1))-omega))
total_check <-check_0*check_1*check_2*check_3
return(list(total_check,degree,inc_star,kappa_star,delta_tild,alpha_tilde))
}
latent_strength<-2
edge_strength<-0.2
p <- 30
h <- 1
set.seed(1)
set.seed(1);return1 <- check_assumptions(p, h,latent_strength,edge_strength,0.005,0.1);
library(irlba)
library(irlba)
latent_strength<-2
edge_strength<-0.2
p <- 30
h <- 1
set.seed(1)
set.seed(1);return1 <- check_assumptions(p, h,latent_strength,edge_strength,0.005,0.1);
return1
F1score_cv
save(data,file = "random_graph_data_compare_to_LVGM.Rda")
